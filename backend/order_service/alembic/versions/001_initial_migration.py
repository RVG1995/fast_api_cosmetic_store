"""Initial migration

Revision ID: 001
Revises: 
Create Date: 2023-10-01 12:00:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '001'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Создание таблицы статусов заказов
    op.create_table('order_statuses',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('name', sa.String(length=50), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('color', sa.String(length=20), nullable=False, server_default='#808080'),
        sa.Column('allow_cancel', sa.Boolean(), nullable=False, server_default='true'),
        sa.Column('is_final', sa.Boolean(), nullable=False, server_default='false'),
        sa.Column('sort_order', sa.Integer(), nullable=False, server_default='0'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_statuses_id'), 'order_statuses', ['id'], unique=False)
    op.create_index(op.f('ix_order_statuses_name'), 'order_statuses', ['name'], unique=True)
    
    # Создание таблицы заказов
    op.create_table('orders',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('status_id', sa.Integer(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
        sa.Column('total_price', sa.Integer(), nullable=False),
        sa.Column('shipping_address', sa.Text(), nullable=True),
        sa.Column('contact_phone', sa.String(length=20), nullable=True),
        sa.Column('contact_email', sa.String(length=100), nullable=True),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('is_paid', sa.Boolean(), nullable=False, server_default='false'),
        sa.Column('payment_method', sa.Enum('CREDIT_CARD', 'DEBIT_CARD', 'PAYPAL', 'BANK_TRANSFER', 'CASH_ON_DELIVERY', name='paymentmethodenum'), nullable=False, server_default='CASH_ON_DELIVERY'),
        sa.ForeignKeyConstraint(['status_id'], ['order_statuses.id'], ondelete='RESTRICT'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    op.create_index(op.f('ix_orders_user_id'), 'orders', ['user_id'], unique=False)
    
    # Создание таблицы элементов заказа
    op.create_table('order_items',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('order_id', sa.Integer(), nullable=False),
        sa.Column('product_id', sa.Integer(), nullable=False),
        sa.Column('product_name', sa.String(length=100), nullable=False),
        sa.Column('product_price', sa.Integer(), nullable=False),
        sa.Column('quantity', sa.Integer(), nullable=False),
        sa.Column('total_price', sa.Integer(), nullable=False),
        sa.CheckConstraint('quantity > 0', name='order_item_quantity_positive'),
        sa.CheckConstraint('price >= 0', name='order_item_price_non_negative'),
        sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_items_id'), 'order_items', ['id'], unique=False)
    
    # Создание таблицы истории статусов заказа
    op.create_table('order_status_history',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('order_id', sa.Integer(), nullable=False),
        sa.Column('status_id', sa.Integer(), nullable=False),
        sa.Column('changed_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
        sa.Column('changed_by_user_id', sa.Integer(), nullable=True),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(['order_id'], ['orders.id'], ondelete='CASCADE'),
        sa.ForeignKeyConstraint(['status_id'], ['order_statuses.id'], ondelete='RESTRICT'),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_order_status_history_id'), 'order_status_history', ['id'], unique=False)
    
    # Создание таблицы адресов доставки
    op.create_table('shipping_addresses',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('full_name', sa.String(length=255), nullable=False),
        sa.Column('address_line1', sa.String(length=255), nullable=False),
        sa.Column('address_line2', sa.String(length=255), nullable=True),
        sa.Column('city', sa.String(length=100), nullable=False),
        sa.Column('state', sa.String(length=100), nullable=True),
        sa.Column('postal_code', sa.String(length=20), nullable=False),
        sa.Column('country', sa.String(length=100), nullable=False),
        sa.Column('phone_number', sa.String(length=20), nullable=False),
        sa.Column('is_default', sa.Boolean(), nullable=False, server_default='false'),
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_shipping_addresses_id'), 'shipping_addresses', ['id'], unique=False)
    op.create_index(op.f('ix_shipping_addresses_user_id'), 'shipping_addresses', ['user_id'], unique=False)
    
    # Создание таблицы адресов для выставления счетов
    op.create_table('billing_addresses',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('full_name', sa.String(length=255), nullable=False),
        sa.Column('address_line1', sa.String(length=255), nullable=False),
        sa.Column('address_line2', sa.String(length=255), nullable=True),
        sa.Column('city', sa.String(length=100), nullable=False),
        sa.Column('state', sa.String(length=100), nullable=True),
        sa.Column('postal_code', sa.String(length=20), nullable=False),
        sa.Column('country', sa.String(length=100), nullable=False),
        sa.Column('phone_number', sa.String(length=20), nullable=False),
        sa.Column('is_default', sa.Boolean(), nullable=False, server_default='false'),
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
        sa.Column('updated_at', sa.DateTime(), nullable=False, server_default=sa.text('now()')),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_billing_addresses_id'), 'billing_addresses', ['id'], unique=False)
    op.create_index(op.f('ix_billing_addresses_user_id'), 'billing_addresses', ['user_id'], unique=False)
    
    # ### end Alembic commands ###
    
    # Добавление начальных данных для статусов заказов
    op.bulk_insert(
        sa.table(
            'order_statuses',
            sa.Column('id', sa.Integer()),
            sa.Column('name', sa.String(length=50)),
            sa.Column('description', sa.Text()),
            sa.Column('color', sa.String(length=20)),
            sa.Column('allow_cancel', sa.Boolean()),
            sa.Column('is_final', sa.Boolean()),
            sa.Column('sort_order', sa.Integer())
        ),
        [
            {
                'id': 1,
                'name': 'Новый',
                'description': 'Заказ только что создан',
                'color': '#3498db',
                'allow_cancel': True,
                'is_final': False,
                'sort_order': 10
            },
            {
                'id': 2,
                'name': 'Оплачен',
                'description': 'Заказ оплачен, ожидает обработки',
                'color': '#2ecc71',
                'allow_cancel': True,
                'is_final': False,
                'sort_order': 20
            },
            {
                'id': 3,
                'name': 'В обработке',
                'description': 'Заказ обрабатывается',
                'color': '#f39c12',
                'allow_cancel': True,
                'is_final': False,
                'sort_order': 30
            },
            {
                'id': 4,
                'name': 'Отправлен',
                'description': 'Заказ отправлен',
                'color': '#9b59b6',
                'allow_cancel': False,
                'is_final': False,
                'sort_order': 40
            },
            {
                'id': 5,
                'name': 'Доставлен',
                'description': 'Заказ доставлен',
                'color': '#27ae60',
                'allow_cancel': False,
                'is_final': True,
                'sort_order': 50
            },
            {
                'id': 6,
                'name': 'Отменен',
                'description': 'Заказ отменен',
                'color': '#e74c3c',
                'allow_cancel': False,
                'is_final': True,
                'sort_order': 60
            },
            {
                'id': 7,
                'name': 'Возврат',
                'description': 'Оформлен возврат заказа',
                'color': '#e67e22',
                'allow_cancel': False,
                'is_final': True,
                'sort_order': 70
            }
        ]
    )


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('billing_addresses')
    op.drop_table('shipping_addresses')
    op.drop_table('order_status_history')
    op.drop_table('order_items')
    op.drop_table('orders')
    op.drop_table('order_statuses')
    # ### end Alembic commands ### 